--Batiments :

  -Batiment(#nomB : string , superficieB : int , addrGPS : string , nbEtage : int)

--Dans les batiments :
  
  -Etage(#nomBat => Batiment , #numEtage : int , planEtage : image)
 
  -Salle(#numE => Etage , #nomS : string , superficieS : int , capaciteHumMax : int , planSalle : image , airComprime : boolean , elecTriphase : boolean , nbPriseElec : int , nbPriseResaux : int)
     *Attention,il y a des normalisation ici sur les salles :
       -PhotoSalle(#nom_Salle => Salle , #photos : image)
       -GazSpecifique(#nomSalle => Salle , #Gaz : {Butane, méthane, oxygène, azote, hydrogène, hélium})
  
  Contraintes :  Projection(Batiment,nomB) = Projection(Etage,nomBat)
                 Projection(Etage,numEtage) = Projection(Salle,numE)


--Les objets qui peuvent se trouver dans les salles :
  
  -Machine(#codeMach : string , #sallemach => Salle , type : {Mach_labo , Mach_fabr} , modeleMach : image , description : text , puissanceElec : int , besoinTriphase : boolean , besoinResaux : boolean , besoinGaz : {Butane, méthane, oxygène, azote, hydrogène, hélium} , NCM : int , EM : string , taille : int)
  
  -MoyenIT(#nomIT : string , #salleIT => Salle , #MachineLie => Machine , #resp => Employe , typeIT : {PC,portable,serveur} , OS : string)
      *Normalisation: AddressMoyenIT(#mIT => MoyenIT , #addr : string)
  
  -PosteTele(#nuInt : int , nuExt : int , #salletele => Salle , typeTele :{VOIP,TOIP,Landline} , medeleTele : image , marque : text , #host => Employe)
 
  -Employe(#numBadge : int , #salleEmploye => Salle , nom : string , prenom : string , e-mail : string , statut : {CDI,CDD,stagiaire} , emplacement : text)

  Contraintes : Projection(Salle,nomS) = Proection(Machine,salleMach) AND Projection(Salle,nomS) = Proection(MoyenIT,salleIT) AND Projection(Salle,nomS) = Proection(PosteTele,salletele) AND Projection(Salle,nomS) = Proection(Employe,salleEmploye)
                Projection(PosteTele,host) = Projection(Employe,numBadge) OR Projection(PosteTele,host) = {}
                Projection(MoyenIT,resp) = Projection(Employe,numBadge) OR Projection(MoyenIT,resp) = {}
                Projection(MoyenIT,MachineLie) = Projection(Machine,codeMach) OR Projection(MoyenIT,MachineLie) = {}

                
--Les organisations :
  
  -Organisation(#sigle : string , nom : string)
  
  -Laboratoire(#sigle => Organisation , logo : image , thmatique_etude : text)
  
  -Departement(#sigle => Organisation , domaine : text)
  
  -Projet(#sigle => Organisation , description : text , date_start : date , date_end : date)
  
  Contraintes : Intersection(Projection(Laboratoire,sigle),Projection(Departement,sigle),Projection(Projet,sigle)) = {}
                Union((Projection(Laboratoire,sigle),Projection(Departement,sigle),Projection(Projet,sigle)) = Projection(Organisation,sigle)
  
 
--Les relations entre les organisations et les employés : 

  --Entre les laboratoires et les employés :
    Un employé peut etre un directeur d'un laboratoire (ou non), donc on ajout un attribut 'directeur' dans la class Laboratoire
    -Laboratoire(#sigle => Organisation , logo : image , #directeur => Employe , thmatique_etude : text)
    
    Rq : Les directeurs des laboratoires ont le droit de choisir leurs membres et les acteurs des projets(mis au niveau applicatif)
    
  --Entre les departements et les employés :
    Un employé peut etre un directeur d'un departement (ou non), donc on ajout un attribut 'directeur' dans la class Departement
    -Departement(#sigle => Organisation , #directeur => Employe , domaine : text)
    
    Rq : Les directeurs des departements ont le droit de choisir leurs membres et les acteurs des projets(mis au niveau applicatif)
    
  --Entre les projets et les employés :
    -RHprojet(#proj => Projet(sigleP) , #EmployeP => Employe(numBadge) , chef : boolean , role : string)
    
    Rq : La methode droite_chef permet de definir les roles des acteurs(mis au niveau applicatif)
    
  --Globalement , pour verifier qu'un employé appartient a quel labo/dep(l'association 'etre membre de') , on ajout deux attributs 'empl_labo' , 'empl_depa' correspond a les sigles
    Au moins un de ces deux attributs n'est pas nul.
  -Employe(#numBadge : int , #salleEmploye => Salle , nom : string , prenom : string , e-mail : string , statut : {CDI,CDD,stagiaire} , #empl_labp => Laboratoire , #empl_depa => Departement , emplacement : text)
    
  Contraintes : Projection(Laboratoire,directeur) = Projection(Employe,numBadge)
                Projection(Departement,directeur) = Projection(Employe,numBadge)
                Projection(RHprojet,proj) = Projection(Projet,sigleP) AND Projection(RHprojet,EmployeP) = Projection(Employe,numBadge)
                ( 
                  (Projection(Employe,empl_labo) = Projection(Laboratoire,sigle) AND Projection(Employe,empl_depa) = Projection(Departement,sigle)) OR
                  (Projection(Employe,empl_labo) = Projection(Laboratoire,sigle) AND Projection(Employe,empl_depa) = {}) OR
                  (Projection(Employe,empl_depa) = Projection(Departement,sigle) AND Projection(Employe,empl_labo) = {})
                )
                

--Les relations entre les projets et les moyens informatiques

  -RessouceProjet_IT(#Proj => Projet(sigle) , #util_debut => Projet(date_start) , #util_fin => Projet(date_end) , #moyen => MoyenIT(nomIT))
  
  Contraintes : Projection(Projet,sigle) = Projection(RessouceProjet_IT,Proj)
                AND 
                Projection(RessouceProjet_IT,moyen) = Projection(MoyenIT,nomIT)
                AND
                Projection(Projet,date_start) = Projection(RessouceProjet_IT,util_debut)
                AND
                Projection(Projet,date_end) = Projection(RessouceProjet_IT,util_fin)


--Choix des heritages :  
  (1)
        //----C'est le cas d'héritage non complet avec classe mère abstraite 
        on choisit un héritage par les classes filles  
        Ici , la classe Organisation est une classe mère abstraite avec aucune de l'association-----//
        
  -Laboratoire(#sigle : string , nom : string , #directeur => Employe , logo : image , thmatique_etude : text)
  
  -Departement(#sigle : string , nom : string , #directeur => Employe , domaine : text)
  
  -Projet(#sigle : string , nom : string , description : text , date_start : date , date_end : date)
  
  Contraintes :  Intersection(Projection(Laboratoire,sigle),Projection(Departement,sigle),Projection(Projet,sigle)) = {}
  
  (2)
        //-----On utilise l'heritage par mere ici comme il n'y a pas d'association et les autres attributs sur les files de la classe 'Machine'-----//
  -Machine(#codeMach : string , #sallemach => Salle , type : {Mach_labo , Mach_fabr} , modeleMach : image , description : text , puissanceElec : int , besoinTriphase : boolean , besoinResaux : boolean , besoinGaz : {Butane, méthane, oxygène, azote, hydrogène, hélium} , NCM : int , EM : string , taille : int)

  Contrainte : type = {Mach_labo} OR type = {Mach_depa}